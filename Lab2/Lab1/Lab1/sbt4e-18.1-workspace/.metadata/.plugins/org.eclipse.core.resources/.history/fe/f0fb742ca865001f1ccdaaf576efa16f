#include <stdio.h>
#include "system.h"
#include <sys/alt_alarm.h>
#include <altera_avalon_pio_regs.h>

volatile int counter = 0;
volatile int key1_pressed = 0;
volatile int counter_changed = 0;
volatile int key1_event = 0; // New flag to signal main loop
alt_alarm timer;

alt_u32 timer_isr(void* context) {
    counter++;
    counter_changed = 1;
    return 500; // Timer continues every 500ms
}

void button_isr(void* context, alt_u32 id) {
    int button_pressed = IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE);
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0); // Clear edge capture reg

    if (button_pressed & 0x01) { // KEY0 pressed
        counter++;
        counter_changed = 1;
    }

    if (button_pressed & 0x02) { // KEY1 pressed
        key1_event = 1; // Set event flag for main loop
    }
}

int main() {
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEYS_BASE, 0); // Clear edge capture reg
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEYS_BASE, 0x7); // Enable interrupts for all buttons
    alt_irq_register(KEYS_IRQ, NULL, button_isr); // Register ISRs

    int timer_running = 0; // Track whether the timer is running

    while(1) {
        if (key1_event) {
            int current_state = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);

            if ((current_state & 0x02) == 0) {  // KEY1 is pressed
                if (!key1_pressed) {  // Ensure we only start the timer once per press
                    key1_pressed = 1;
                    if (!timer_running) {  // Start the timer if it is not running
                        alt_alarm_start(&timer, 500, timer_isr, NULL);
                        timer_running = 1;
                    }
                }
            } else { // KEY1 is released
                if (key1_pressed) {  // Ensure we only stop the timer once per release
                    key1_pressed = 0;
                    if (timer_running) {  // Stop the timer if it is running
                        alt_alarm_stop(&timer);
                        timer_running = 0;
                    }
                }
            }

            key1_event = 0; // Clear the event flag after handling
        }

        if (counter_changed) {
            printf("Counter: %d\n", counter);
            counter_changed = 0;
        }
    }
}
